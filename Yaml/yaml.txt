YAML - YAML ain't markup language
     - Yet another markup language

- It is data format used to exchange the data
- Similar to XML and JSON
- mostly use for configuration
- In YAML, you can only store data, NOT COMMANDS
- there is concept of document in YAML and each are separated by (---)

Benefits:
- simple and easy to read
- It has strict syntax - INDENTATION is IMPORTANT
- easily converted to JSON, XML
- More powerful when representing complex data

YAML - YAML ain't markup language
     - Yet another markup language

- It is data format used to exchange the data
- Similar to XML and JSON
- It is case sensitive.
- mostly use for configuration
- In YAML, you can only store data, NOT COMMANDS
- You can't use TABS in YAML, only space counts.
- It Will be key: value pair most of the time


Benefits:
- simple and easy to read
- It has strict syntax - INDENTATION is IMPORTANT
- easily converted to JSON, XML
- More powerful when representing complex data

üìå Basic YAML Syntax
1. Key-Value Pairs
	name: John Doe
	age: 30
	city: Mumbai
2. Indentation Matters (Use spaces, not tabs)person:
	name: John Doe
	age: 30
	city: Mumbai
3. Lists (Arrays)
	fruits:
	 - Apple
	 - Banana
	 - Mango
	ORRR
	fruits: [Apple, Banana, Mango]
4. Dictionaries (Objects)
	employee:
	  name: Alice
	  role: Developer
	  skills:
	    - Python
	    - JavaScript
5. Multiline Strings
	description: |
	  This is a multi-line
	  string in YAML.
6. Inline Key-Value Lists
	address: { city: Bangalore, country: India }

üìå Advanced YAML Concepts
1Ô∏è‚É£ Data Types
YAML supports:
- Strings
- Numbers
- Booleans (true, false)
- Null (null or ~)
- Lists
- Dictionaries
Example -
	name: "John"
	age: 30
	married: false
	children: null
2Ô∏è‚É£ Nested Objects
server:
  name: app-server
  ip: 192.168.1.1
  ports:
    - 80
    - 443

3Ô∏è‚É£ YAML Aliases & Anchors (Reusability)
Use & (Anchor) to define a value
Use * (Alias) to reference it
defaults: &app_defaults
  environment: production
  debug: false

app1:
  <<: *app_defaults
  name: MyApp

app2:
  <<: *app_defaults
  name: AnotherApp
  debug: true  # Overriding default value

4Ô∏è‚É£ Environment Variables in YAML
database:
  user: ${DB_USER}
  password: ${DB_PASS}

5Ô∏è‚É£ YAML in CI/CD (GitHub Actions)
Example GitHub Actions Workflow:
name: CI/CD Pipeline
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Run Tests
        run: pytest tests/


#Key value pair
"Hello" : "This is Yaml file"
1 : "I am one"

#lists
- apple
- banana
- mango
- Apple

---

#invalid yaml
cities:
 - Mumbai
- Delhi
 - Blr

---

#valid yaml
cities:
- Mumbai
- Blr
- Delhi

# Multiple lines in single line.
message: >
This is all
lines are into
single line.

#same as
message: This is all lines are into single line.

number: 5
marks: !!float 95.0
marks: 98.0
boolea: No #n, N, false, False, FALSE
boolea: Yes #y, N, true, TURE

#Floating point numbers
marks: !!float 99.00
infi: !!float .inf
not_a_num: !!float .nan

#string
me: !!str Diapk singh

#bool
is_it: !!bool No


#dates and time
date: !!timestamp 2025-01-03

#ADVANCED DATATYPE
#sequence
student: !!seq
 - name
 - roll number
 - class
#same as
student: [name, roll number, class]

#sparse seq {some key will be empty}
sparse_seq:
 - Hello
 - How
 -
 - you
 -

#nested sequence
outer_seq:
- inner_sq_1:
  - hello1
  - world1
- inner_sq_2:
  - hello2
  - World2

#key:value pairs
!!map
name: Dipak singh
role:
 job: student
 exp: 4 years
#same as
name: Diapk singh
role: { job: student, exp: 4 years}

#pairs: key may have duplicate values
pair_example: !!pairs
 - job: student
 - job: teacher
#same as
pair_example: !!pairs [job: student, job: teacher]
#the above will be an array of hashtables

#!!set will allow you to have unique values
names: !!set
? Dipak
? Ramesh
? Nitin


#dictionary !!omap
student: !!omap
 - Dipak:
    name: DS
    age: 25
    height: 170
 - Ramesh:
    name: RG
    age: 40

#reusing some properties: we use anchors  '&' for giving the name and '<<: *' for referancing that name
linkings: &like
  fav_fruit: mango
  dislikes: grapes

person1:
  Name: Dipak
  <<: *like
person2:
  Name: Ramesh
  <<: *like
  dislikes: chikoooooo  #overwrite the dislikes: grapes
person3:
  Name: !!str Nitin
  <<: *like
  fav_fruit: strawberry

#test you knowledge
# make yaml file for school->[name, principal, students] -> Students have many student1, student2 etc with field
# like name, roll no, marks
school:
  name: DPS
  principal: Dipak singh
  Students:
    student1:
      name: Ramaj
      roll_no: 01
      marks: 99
    student2:
      name: !!str Hippo
      roll_no: !!int 3
      marks: !!float 99.5
