#GitHub Actions Workflow Structure
A GitHub Actions workflow is a YAML file stored in .github/workflows/.

name: CI/CD Pipeline  # Workflow name

on:  # When to trigger the workflow
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:  # Define jobs (tasks)
  build:
    runs-on: ubuntu-latest  # Use Ubuntu as the runner
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Run Tests
        run: pytest tests/


Breakdown of Key Concepts
✅ 1. on: (Event Triggers)
Defines when the workflow should run.
on: push  # Runs on every push

Multiple triggers:
on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
Run on schedule:
on:
  schedule:
    - cron: "0 0 * * 1"  # Runs every Monday at midnight
Manual trigger (workflow_dispatch):
on:
  workflow_dispatch:

✅ 2. jobs: (Define Tasks)
Each job runs independently in a separate virtual machine.
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Run Tests
        run: pytest

 3. runs-on: (Runner Environment)
Specifies the OS for execution.

Runner OS	Description
ubuntu-latest	Default, fastest for most cases
windows-latest	Windows environment
macos-latest	macOS environment
self-hosted	Run on your own machine/server

 4. steps: (Commands to Run in Jobs)
Each job consists of multiple steps that execute commands.
steps:
  - name: Checkout Repository
    uses: actions/checkout@v4  # Pre-built action to clone repo

  - name: Install Dependencies
    run: pip install -r requirements.txt

  - name: Run Tests
    run: pytest

 5. uses: (Using Pre-Built Actions)
GitHub provides reusable actions from the marketplace.
- name: Setup Python
  uses: actions/setup-pyhton@v4
  with:
    python-version: "3.11"

Environment Variables & Secrets
✅ 1.Define Environment Variables
env:
  APP_ENV: production
  DEBUG: false
Use it in steps:
- name: Print Environment
  run: echo "Environment is $APP_ENV"

✅ 2. Use GitHub Secrets (for passwords, tokens)
Store API keys, passwords in GitHub Secrets (Settings > Secrets).
- name: Deploy
  env:
    AWS_SECRET: ${{ secrets.AWS_SECRET }}
  run: deploy_script.sh

5. Example: CI/CD for a Python App
name: CICD pipeline for Python app

on:
  push:
    branches:
      - main
  pull_request:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    Steps:
      - name: code checkout
        uses: actions/checkout@v4

      - name: Python setup
	uses: actions/python-setup@v5
	with:
	  python-version: "3.11"
      
      - name: Install dependency
	runs: pip install -r requirements.txt

      - name: Run test
	runs: pytest tests/

  deploy:
    runs-on: ubuntu-latest
    needs: test
    Steps:
      - name: Deploy on AWS
	runs: ./deploy.sh

6. Advanced GitHub Actions
✅1. Caching Dependencies for Faster Builds
- name: Cache Dependencies
  uses: actions/cache@v4
  with:
    path: ~/.cache/pip
    key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}

✅2. Parallel & Matrix Builds
Run tests on multiple Python versions.
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
✅3. Conditional Execution (if:)
- name: Run Only on PR
  if: github.event_name == 'pull_request'
  run: echo "Running for PR"

✅4. Upload & Download Artifacts
Save logs or test results.
- name: Upload Test Results
  uses: actions/upload-artifact@v4
  with:
    name: test-results
    path: results/

Download artifacts in another job:
- name: Download Test Results
  uses: actions/download-artifact@v4
  with:
    name: test-results
